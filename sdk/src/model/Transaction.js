/**
 * Yapily API
 * To access endpoints that require authentication, use your application key and secret created in the Dashboard (https://dashboard.yapily.com)
 *
 * The version of the OpenAPI document: 0.0.160
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AddressDetails from './AddressDetails';
import Amount from './Amount';
import Balance from './Balance';
import ChargeDetails from './ChargeDetails';
import CurrencyExchange from './CurrencyExchange';
import IsoBankTransactionCode from './IsoBankTransactionCode';
import Merchant from './Merchant';
import ProprietaryBankTransactionCode from './ProprietaryBankTransactionCode';
import StatementReference from './StatementReference';

/**
 * The Transaction model module.
 * @module model/Transaction
 * @version 0.0.161
 */
class Transaction {
    /**
     * Constructs a new <code>Transaction</code>.
     * @alias module:model/Transaction
     */
    constructor() { 
        
        Transaction.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Transaction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Transaction} obj Optional instance to populate.
     * @return {module:model/Transaction} The populated <code>Transaction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Transaction();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'Date');
            }
            if (data.hasOwnProperty('bookingDateTime')) {
                obj['bookingDateTime'] = ApiClient.convertToType(data['bookingDateTime'], 'Date');
            }
            if (data.hasOwnProperty('valueDateTime')) {
                obj['valueDateTime'] = ApiClient.convertToType(data['valueDateTime'], 'Date');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('transactionAmount')) {
                obj['transactionAmount'] = Amount.constructFromObject(data['transactionAmount']);
            }
            if (data.hasOwnProperty('currencyExchange')) {
                obj['currencyExchange'] = CurrencyExchange.constructFromObject(data['currencyExchange']);
            }
            if (data.hasOwnProperty('chargeDetails')) {
                obj['chargeDetails'] = ChargeDetails.constructFromObject(data['chargeDetails']);
            }
            if (data.hasOwnProperty('reference')) {
                obj['reference'] = ApiClient.convertToType(data['reference'], 'String');
            }
            if (data.hasOwnProperty('statementReferences')) {
                obj['statementReferences'] = ApiClient.convertToType(data['statementReferences'], [StatementReference]);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('transactionInformation')) {
                obj['transactionInformation'] = ApiClient.convertToType(data['transactionInformation'], ['String']);
            }
            if (data.hasOwnProperty('addressDetails')) {
                obj['addressDetails'] = AddressDetails.constructFromObject(data['addressDetails']);
            }
            if (data.hasOwnProperty('isoBankTransactionCode')) {
                obj['isoBankTransactionCode'] = IsoBankTransactionCode.constructFromObject(data['isoBankTransactionCode']);
            }
            if (data.hasOwnProperty('proprietaryBankTransactionCode')) {
                obj['proprietaryBankTransactionCode'] = ProprietaryBankTransactionCode.constructFromObject(data['proprietaryBankTransactionCode']);
            }
            if (data.hasOwnProperty('balance')) {
                obj['balance'] = Balance.constructFromObject(data['balance']);
            }
            if (data.hasOwnProperty('merchant')) {
                obj['merchant'] = Merchant.constructFromObject(data['merchant']);
            }
        }
        return obj;
    }


}

/**
 * Transaction Id returned by the institution if present
 * @member {String} id
 */
Transaction.prototype['id'] = undefined;

/**
 * Transaction date as defined by the institution
 * @member {Date} date
 */
Transaction.prototype['date'] = undefined;

/**
 * Date and (if available) time that transaction is posted
 * @member {Date} bookingDateTime
 */
Transaction.prototype['bookingDateTime'] = undefined;

/**
 * The actual or expected date and time transaction is cleared
 * @member {Date} valueDateTime
 */
Transaction.prototype['valueDateTime'] = undefined;

/**
 * The status of the transaction
 * @member {module:model/Transaction.StatusEnum} status
 */
Transaction.prototype['status'] = undefined;

/**
 * Deprecated. Use the amount value in `transactionAmount` instead
 * @member {Number} amount
 */
Transaction.prototype['amount'] = undefined;

/**
 * Deprecated. Use the currency value in `transactionAmount` instead
 * @member {String} currency
 */
Transaction.prototype['currency'] = undefined;

/**
 * @member {module:model/Amount} transactionAmount
 */
Transaction.prototype['transactionAmount'] = undefined;

/**
 * @member {module:model/CurrencyExchange} currencyExchange
 */
Transaction.prototype['currencyExchange'] = undefined;

/**
 * @member {module:model/ChargeDetails} chargeDetails
 */
Transaction.prototype['chargeDetails'] = undefined;

/**
 * Transaction reference
 * @member {String} reference
 */
Transaction.prototype['reference'] = undefined;

/**
 * @member {Array.<module:model/StatementReference>} statementReferences
 */
Transaction.prototype['statementReferences'] = undefined;

/**
 * Unstructured text containing details of the transaction. Usage varies according to the institution
 * @member {String} description
 */
Transaction.prototype['description'] = undefined;

/**
 * Further information related to the transaction. Usage varies according to the institution
 * @member {Array.<String>} transactionInformation
 */
Transaction.prototype['transactionInformation'] = undefined;

/**
 * @member {module:model/AddressDetails} addressDetails
 */
Transaction.prototype['addressDetails'] = undefined;

/**
 * @member {module:model/IsoBankTransactionCode} isoBankTransactionCode
 */
Transaction.prototype['isoBankTransactionCode'] = undefined;

/**
 * @member {module:model/ProprietaryBankTransactionCode} proprietaryBankTransactionCode
 */
Transaction.prototype['proprietaryBankTransactionCode'] = undefined;

/**
 * @member {module:model/Balance} balance
 */
Transaction.prototype['balance'] = undefined;

/**
 * @member {module:model/Merchant} merchant
 */
Transaction.prototype['merchant'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
Transaction['StatusEnum'] = {

    /**
     * value: "BOOKED"
     * @const
     */
    "BOOKED": "BOOKED",

    /**
     * value: "PENDING"
     * @const
     */
    "PENDING": "PENDING"
};



export default Transaction;

