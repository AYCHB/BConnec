/**
 * Yapily API
 * To access endpoints that require authentication, use your application key and secret created in the Dashboard (https://dashboard.yapily.com)
 *
 * The version of the OpenAPI document: 0.0.160
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OverdraftOtherFeeType from './OverdraftOtherFeeType';

/**
 * The OverdraftOverdraftFeeChargeCap model module.
 * @module model/OverdraftOverdraftFeeChargeCap
 * @version 0.0.161
 */
class OverdraftOverdraftFeeChargeCap {
    /**
     * Constructs a new <code>OverdraftOverdraftFeeChargeCap</code>.
     * Details about any caps (maximum charges) that apply to a particular fee/charge
     * @alias module:model/OverdraftOverdraftFeeChargeCap
     */
    constructor() { 
        
        OverdraftOverdraftFeeChargeCap.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OverdraftOverdraftFeeChargeCap</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OverdraftOverdraftFeeChargeCap} obj Optional instance to populate.
     * @return {module:model/OverdraftOverdraftFeeChargeCap} The populated <code>OverdraftOverdraftFeeChargeCap</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OverdraftOverdraftFeeChargeCap();

            if (data.hasOwnProperty('CappingPeriod')) {
                obj['CappingPeriod'] = ApiClient.convertToType(data['CappingPeriod'], 'String');
            }
            if (data.hasOwnProperty('FeeCapAmount')) {
                obj['FeeCapAmount'] = ApiClient.convertToType(data['FeeCapAmount'], 'String');
            }
            if (data.hasOwnProperty('FeeCapOccurrence')) {
                obj['FeeCapOccurrence'] = ApiClient.convertToType(data['FeeCapOccurrence'], 'Number');
            }
            if (data.hasOwnProperty('FeeType')) {
                obj['FeeType'] = ApiClient.convertToType(data['FeeType'], ['String']);
            }
            if (data.hasOwnProperty('MinMaxType')) {
                obj['MinMaxType'] = ApiClient.convertToType(data['MinMaxType'], 'String');
            }
            if (data.hasOwnProperty('Notes')) {
                obj['Notes'] = ApiClient.convertToType(data['Notes'], ['String']);
            }
            if (data.hasOwnProperty('OtherFeeType')) {
                obj['OtherFeeType'] = ApiClient.convertToType(data['OtherFeeType'], [OverdraftOtherFeeType]);
            }
            if (data.hasOwnProperty('OverdraftControlIndicator')) {
                obj['OverdraftControlIndicator'] = ApiClient.convertToType(data['OverdraftControlIndicator'], 'Boolean');
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/OverdraftOverdraftFeeChargeCap.CappingPeriodEnum} CappingPeriod
 */
OverdraftOverdraftFeeChargeCap.prototype['CappingPeriod'] = undefined;

/**
 * @member {String} FeeCapAmount
 */
OverdraftOverdraftFeeChargeCap.prototype['FeeCapAmount'] = undefined;

/**
 * @member {Number} FeeCapOccurrence
 */
OverdraftOverdraftFeeChargeCap.prototype['FeeCapOccurrence'] = undefined;

/**
 * @member {Array.<module:model/OverdraftOverdraftFeeChargeCap.FeeTypeEnum>} FeeType
 */
OverdraftOverdraftFeeChargeCap.prototype['FeeType'] = undefined;

/**
 * @member {module:model/OverdraftOverdraftFeeChargeCap.MinMaxTypeEnum} MinMaxType
 */
OverdraftOverdraftFeeChargeCap.prototype['MinMaxType'] = undefined;

/**
 * @member {Array.<String>} Notes
 */
OverdraftOverdraftFeeChargeCap.prototype['Notes'] = undefined;

/**
 * @member {Array.<module:model/OverdraftOtherFeeType>} OtherFeeType
 */
OverdraftOverdraftFeeChargeCap.prototype['OtherFeeType'] = undefined;

/**
 * @member {Boolean} OverdraftControlIndicator
 */
OverdraftOverdraftFeeChargeCap.prototype['OverdraftControlIndicator'] = undefined;





/**
 * Allowed values for the <code>CappingPeriod</code> property.
 * @enum {String}
 * @readonly
 */
OverdraftOverdraftFeeChargeCap['CappingPeriodEnum'] = {

    /**
     * value: "Day"
     * @const
     */
    "Day": "Day",

    /**
     * value: "Half Year"
     * @const
     */
    "Half Year": "Half Year",

    /**
     * value: "Month"
     * @const
     */
    "Month": "Month",

    /**
     * value: "Quarter"
     * @const
     */
    "Quarter": "Quarter",

    /**
     * value: "Week"
     * @const
     */
    "Week": "Week",

    /**
     * value: "AcademicTerm"
     * @const
     */
    "AcademicTerm": "AcademicTerm",

    /**
     * value: "Year"
     * @const
     */
    "Year": "Year"
};


/**
 * Allowed values for the <code>feeType</code> property.
 * @enum {String}
 * @readonly
 */
OverdraftOverdraftFeeChargeCap['FeeTypeEnum'] = {

    /**
     * value: "ArrangedOverdraft"
     * @const
     */
    "ArrangedOverdraft": "ArrangedOverdraft",

    /**
     * value: "EmergencyBorrowing"
     * @const
     */
    "EmergencyBorrowing": "EmergencyBorrowing",

    /**
     * value: "BorrowingItem"
     * @const
     */
    "BorrowingItem": "BorrowingItem",

    /**
     * value: "OverdraftRenewal"
     * @const
     */
    "OverdraftRenewal": "OverdraftRenewal",

    /**
     * value: "AnnualReview"
     * @const
     */
    "AnnualReview": "AnnualReview",

    /**
     * value: "OverdraftSetup"
     * @const
     */
    "OverdraftSetup": "OverdraftSetup",

    /**
     * value: "Surcharge"
     * @const
     */
    "Surcharge": "Surcharge",

    /**
     * value: "TempOverdraft"
     * @const
     */
    "TempOverdraft": "TempOverdraft",

    /**
     * value: "UnauthorisedBorrowing"
     * @const
     */
    "UnauthorisedBorrowing": "UnauthorisedBorrowing",

    /**
     * value: "UnauthorisedPaidTrans"
     * @const
     */
    "UnauthorisedPaidTrans": "UnauthorisedPaidTrans",

    /**
     * value: "Other"
     * @const
     */
    "Other": "Other",

    /**
     * value: "UnauthorisedUnpaidTrans"
     * @const
     */
    "UnauthorisedUnpaidTrans": "UnauthorisedUnpaidTrans"
};


/**
 * Allowed values for the <code>MinMaxType</code> property.
 * @enum {String}
 * @readonly
 */
OverdraftOverdraftFeeChargeCap['MinMaxTypeEnum'] = {

    /**
     * value: "Minimum"
     * @const
     */
    "Minimum": "Minimum",

    /**
     * value: "Maximum"
     * @const
     */
    "Maximum": "Maximum"
};



export default OverdraftOverdraftFeeChargeCap;

