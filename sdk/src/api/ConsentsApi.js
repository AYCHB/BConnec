/**
 * Yapily API
 * To access endpoints that require authentication, use your application key and secret created in the Dashboard (https://dashboard.yapily.com)
 *
 * The version of the OpenAPI document: 0.0.161
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiListResponseOfConsent from '../model/ApiListResponseOfConsent';
import ApiResponseOfConsent from '../model/ApiResponseOfConsent';
import ApiResponseOfConsentDeleteResponse from '../model/ApiResponseOfConsentDeleteResponse';
import Consent from '../model/Consent';
import ConsentAuthCodeRequest from '../model/ConsentAuthCodeRequest';
import CreateConsentAccessToken from '../model/CreateConsentAccessToken';
import OneTimeTokenRequest from '../model/OneTimeTokenRequest';

/**
* Consents service.
* @module api/ConsentsApi
* @version 0.0.161
*/
export default class ConsentsApi {

    /**
    * Constructs a new ConsentsApi. 
    * @alias module:api/ConsentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addConsentUsingPOST operation.
     * @callback module:api/ConsentsApi~addConsentUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Consent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Post consent
     * @param {String} userUuid userUuid
     * @param {module:model/CreateConsentAccessToken} createConsentAccessToken createConsentAccessToken
     * @param {module:api/ConsentsApi~addConsentUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Consent}
     */
    addConsentUsingPOST(userUuid, createConsentAccessToken, callback) {
      let postBody = createConsentAccessToken;
      // verify the required parameter 'userUuid' is set
      if (userUuid === undefined || userUuid === null) {
        throw new Error("Missing the required parameter 'userUuid' when calling addConsentUsingPOST");
      }
      // verify the required parameter 'createConsentAccessToken' is set
      if (createConsentAccessToken === undefined || createConsentAccessToken === null) {
        throw new Error("Missing the required parameter 'createConsentAccessToken' when calling addConsentUsingPOST");
      }

      let pathParams = {
        'userUuid': userUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'tokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = Consent;
      return this.apiClient.callApi(
        '/users/{userUuid}/consents', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createConsentWithCodeUsingPOST operation.
     * @callback module:api/ConsentsApi~createConsentWithCodeUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Consent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Post auth-code and auth-state
     * @param {module:model/ConsentAuthCodeRequest} consentByAuthCode consentByAuthCode
     * @param {module:api/ConsentsApi~createConsentWithCodeUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Consent}
     */
    createConsentWithCodeUsingPOST(consentByAuthCode, callback) {
      let postBody = consentByAuthCode;
      // verify the required parameter 'consentByAuthCode' is set
      if (consentByAuthCode === undefined || consentByAuthCode === null) {
        throw new Error("Missing the required parameter 'consentByAuthCode' when calling createConsentWithCodeUsingPOST");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'tokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = Consent;
      return this.apiClient.callApi(
        '/consent-auth-code', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUsingDELETE operation.
     * @callback module:api/ConsentsApi~deleteUsingDELETECallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponseOfConsentDeleteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete consent
     * @param {String} consentId consentId
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.forceDelete forceDelete
     * @param {module:api/ConsentsApi~deleteUsingDELETECallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponseOfConsentDeleteResponse}
     */
    deleteUsingDELETE(consentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'consentId' is set
      if (consentId === undefined || consentId === null) {
        throw new Error("Missing the required parameter 'consentId' when calling deleteUsingDELETE");
      }

      let pathParams = {
        'consentId': consentId
      };
      let queryParams = {
        'forceDelete': opts['forceDelete']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = ApiResponseOfConsentDeleteResponse;
      return this.apiClient.callApi(
        '/consents/{consentId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getConsentByIdUsingGET operation.
     * @callback module:api/ConsentsApi~getConsentByIdUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponseOfConsent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get consent
     * @param {String} consentId consentId
     * @param {module:api/ConsentsApi~getConsentByIdUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponseOfConsent}
     */
    getConsentByIdUsingGET(consentId, callback) {
      let postBody = null;
      // verify the required parameter 'consentId' is set
      if (consentId === undefined || consentId === null) {
        throw new Error("Missing the required parameter 'consentId' when calling getConsentByIdUsingGET");
      }

      let pathParams = {
        'consentId': consentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = ApiResponseOfConsent;
      return this.apiClient.callApi(
        '/consents/{consentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getConsentBySingleAccessConsentUsingPOST operation.
     * @callback module:api/ConsentsApi~getConsentBySingleAccessConsentUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Consent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Post one time token
     * @param {module:model/OneTimeTokenRequest} oneTimeToken oneTimeToken
     * @param {module:api/ConsentsApi~getConsentBySingleAccessConsentUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Consent}
     */
    getConsentBySingleAccessConsentUsingPOST(oneTimeToken, callback) {
      let postBody = oneTimeToken;
      // verify the required parameter 'oneTimeToken' is set
      if (oneTimeToken === undefined || oneTimeToken === null) {
        throw new Error("Missing the required parameter 'oneTimeToken' when calling getConsentBySingleAccessConsentUsingPOST");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'tokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = Consent;
      return this.apiClient.callApi(
        '/consent-one-time-token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getConsentsUsingGET operation.
     * @callback module:api/ConsentsApi~getConsentsUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiListResponseOfConsent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get consents sorted by creation date
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.filterApplicationUserId Filter consents by your application user Id (applicationUserId)
     * @param {Array.<String>} opts.filterUserUuid Filter consents by Yapily user Id (userUuid)
     * @param {Array.<String>} opts.filterInstitution Use this parameter to filter consent by institution, using the Yapily institution Id
     * @param {Array.<String>} opts.filterStatus Use this parameter to filter consent by status
     * @param {String} opts.from Use this parameter to filter consents created after the date specified
     * @param {String} opts.before Use this parameter to filter consents created before the date specified
     * @param {Number} opts.limit Use this parameter to limit consent results, max limit is 20
     * @param {Number} opts.offset Use this parameter to specify the offset of the results (default to 0)
     * @param {module:api/ConsentsApi~getConsentsUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiListResponseOfConsent}
     */
    getConsentsUsingGET(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter[applicationUserId]': this.apiClient.buildCollectionParam(opts['filterApplicationUserId'], 'multi'),
        'filter[userUuid]': this.apiClient.buildCollectionParam(opts['filterUserUuid'], 'multi'),
        'filter[institution]': this.apiClient.buildCollectionParam(opts['filterInstitution'], 'multi'),
        'filter[status]': this.apiClient.buildCollectionParam(opts['filterStatus'], 'multi'),
        'from': opts['from'],
        'before': opts['before'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = ApiListResponseOfConsent;
      return this.apiClient.callApi(
        '/consents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserConsentsUsingGET operation.
     * @callback module:api/ConsentsApi~getUserConsentsUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Consent>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get latest user consents
     * @param {String} userUuid userUuid
     * @param {Object} opts Optional parameters
     * @param {String} opts.filterInstitution Use this parameter to filter consent by institution, using the Yapily institution Id. This replaces the deprecated `institutionId` query param.
     * @param {Number} opts.limit Use this parameter to limit consent results, max limit is 20
     * @param {module:api/ConsentsApi~getUserConsentsUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Consent>}
     */
    getUserConsentsUsingGET(userUuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userUuid' is set
      if (userUuid === undefined || userUuid === null) {
        throw new Error("Missing the required parameter 'userUuid' when calling getUserConsentsUsingGET");
      }

      let pathParams = {
        'userUuid': userUuid
      };
      let queryParams = {
        'filter[institution]': opts['filterInstitution'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = [Consent];
      return this.apiClient.callApi(
        '/users/{userUuid}/consents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
