/**
 * Yapily API
 * To access endpoints that require authentication, use your application key and secret created in the Dashboard (https://dashboard.yapily.com)
 *
 * The version of the OpenAPI document: 0.0.161
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiListResponseOfBulkUserDelete from '../model/ApiListResponseOfBulkUserDelete';
import ApiResponseOfBulkUserDeleteDetails from '../model/ApiResponseOfBulkUserDeleteDetails';
import ApiResponseOfUserDeleteResponse from '../model/ApiResponseOfUserDeleteResponse';
import ApplicationUser from '../model/ApplicationUser';
import NewApplicationUser from '../model/NewApplicationUser';
import UserDeleteRequest from '../model/UserDeleteRequest';

/**
* ApplicationUsers service.
* @module api/ApplicationUsersApi
* @version 0.0.161
*/
export default class ApplicationUsersApi {

    /**
    * Constructs a new ApplicationUsersApi. 
    * @alias module:api/ApplicationUsersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addUserUsingPOST operation.
     * @callback module:api/ApplicationUsersApi~addUserUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApplicationUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add an application user
     * @param {module:model/NewApplicationUser} newApplicationUser newApplicationUser
     * @param {module:api/ApplicationUsersApi~addUserUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApplicationUser}
     */
    addUserUsingPOST(newApplicationUser, callback) {
      let postBody = newApplicationUser;
      // verify the required parameter 'newApplicationUser' is set
      if (newApplicationUser === undefined || newApplicationUser === null) {
        throw new Error("Missing the required parameter 'newApplicationUser' when calling addUserUsingPOST");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'tokenAuth'];
      let contentTypes = ['application/json;charset=UTF-8'];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = ApplicationUser;
      return this.apiClient.callApi(
        '/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUserUsingDELETE operation.
     * @callback module:api/ApplicationUsersApi~deleteUserUsingDELETECallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponseOfUserDeleteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an application user and sub-resources (including consent resources on institution APIs if they exist)
     * @param {String} userUuid userUuid
     * @param {module:api/ApplicationUsersApi~deleteUserUsingDELETECallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponseOfUserDeleteResponse}
     */
    deleteUserUsingDELETE(userUuid, callback) {
      let postBody = null;
      // verify the required parameter 'userUuid' is set
      if (userUuid === undefined || userUuid === null) {
        throw new Error("Missing the required parameter 'userUuid' when calling deleteUserUsingDELETE");
      }

      let pathParams = {
        'userUuid': userUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = ApiResponseOfUserDeleteResponse;
      return this.apiClient.callApi(
        '/users/{userUuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeleteUsersJobUsingGET operation.
     * @callback module:api/ApplicationUsersApi~getDeleteUsersJobUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponseOfBulkUserDeleteDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get details of a user deletion job
     * @param {String} jobId job-id
     * @param {module:api/ApplicationUsersApi~getDeleteUsersJobUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponseOfBulkUserDeleteDetails}
     */
    getDeleteUsersJobUsingGET(jobId, callback) {
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling getDeleteUsersJobUsingGET");
      }

      let pathParams = {
        'job-id': jobId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = ApiResponseOfBulkUserDeleteDetails;
      return this.apiClient.callApi(
        '/delete-users/{job-id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeleteUsersJobsUsingGET operation.
     * @callback module:api/ApplicationUsersApi~getDeleteUsersJobsUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiListResponseOfBulkUserDelete} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get details of all user deletion jobs
     * @param {module:api/ApplicationUsersApi~getDeleteUsersJobsUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiListResponseOfBulkUserDelete}
     */
    getDeleteUsersJobsUsingGET(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = ApiListResponseOfBulkUserDelete;
      return this.apiClient.callApi(
        '/delete-users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserUsingGET operation.
     * @callback module:api/ApplicationUsersApi~getUserUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApplicationUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an application user
     * @param {String} userUuid userUuid
     * @param {module:api/ApplicationUsersApi~getUserUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApplicationUser}
     */
    getUserUsingGET(userUuid, callback) {
      let postBody = null;
      // verify the required parameter 'userUuid' is set
      if (userUuid === undefined || userUuid === null) {
        throw new Error("Missing the required parameter 'userUuid' when calling getUserUsingGET");
      }

      let pathParams = {
        'userUuid': userUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = ApplicationUser;
      return this.apiClient.callApi(
        '/users/{userUuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUsersUsingGET operation.
     * @callback module:api/ApplicationUsersApi~getUsersUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ApplicationUser>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get application users
     * @param {module:api/ApplicationUsersApi~getUsersUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ApplicationUser>}
     */
    getUsersUsingGET(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = [ApplicationUser];
      return this.apiClient.callApi(
        '/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startDeleteUsersJobUsingPOST operation.
     * @callback module:api/ApplicationUsersApi~startDeleteUsersJobUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponseOfBulkUserDeleteDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start a job to delete application users by specifying their identifiers
     * @param {module:model/UserDeleteRequest} userDeleteRequest userDeleteRequest
     * @param {module:api/ApplicationUsersApi~startDeleteUsersJobUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponseOfBulkUserDeleteDetails}
     */
    startDeleteUsersJobUsingPOST(userDeleteRequest, callback) {
      let postBody = userDeleteRequest;
      // verify the required parameter 'userDeleteRequest' is set
      if (userDeleteRequest === undefined || userDeleteRequest === null) {
        throw new Error("Missing the required parameter 'userDeleteRequest' when calling startDeleteUsersJobUsingPOST");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'tokenAuth'];
      let contentTypes = ['application/json;charset=UTF-8'];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = ApiResponseOfBulkUserDeleteDetails;
      return this.apiClient.callApi(
        '/delete-users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
